// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username    String  @unique @db.VarChar(100)
  gender      Gender
  profession  String? @db.VarChar(100)
  nationality String? @db.VarChar(100)
  email       String  @unique @db.VarChar(255)

  password         String
  photo            String? 
  sent             Conversation[] @relation(name: "sent")
  received         Conversation[] @relation(name: "received")
  otps             Otp[]
  messagesSent     Message[]      @relation(name: "message_sent")
  messagesReceived Message[]      @relation(name: "message_received")
  state Boolean @default(false)

  publicKey  String? 
  privateKey String? 
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User   @relation(fields: [senderId], references: [id], name: "sent")
  senderId String

  receiver   User   @relation(fields: [receiverId], references: [id], name: "received")
  receiverId String

  messages Message[]

  lastMessage Json?
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  received Boolean @default(true)
  opened   Boolean @default(false)
  read     Boolean @default(false)

  content String 

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  sender   User   @relation(fields: [senderId], references: [id], name: "message_sent")
  senderId String

  receiver   User   @relation(fields: [receiverId], references: [id], name: "message_received")
  receiverId String
}

model Otp {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  value     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiredAt DateTime
  expired   Boolean  @default(false)
  used      Boolean  @default(false)
}
